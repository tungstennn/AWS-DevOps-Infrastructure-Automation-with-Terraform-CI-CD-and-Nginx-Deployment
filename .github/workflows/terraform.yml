name: Terraform CI/CD

on:
  push:
    branches:
      - dev
      - stage
      - prod

jobs:
  # terraform:
  #   name: Deploy to ${{ github.ref_name }} Environment
  #   runs-on: ubuntu-latest

  #   steps:
  #     # Step 1: Check out the code
  #     - name: Checkout Code
  #       uses: actions/checkout@v3

  #     # Step 2: Set up Terraform
  #     - name: Set Up Terraform
  #       uses: hashicorp/setup-terraform@v2
  #       with:
  #         terraform_version: "1.7.3"

  #     # Step 3: Initialize Terraform in the environment-specific directory
  #     - name: Initialize Terraform
  #       run: terraform init
  #       working-directory: ./environments/${{ github.ref_name }}

  #     # Step 4: Plan Terraform Changes
  #     - name: Plan Terraform Changes
  #       run: terraform plan -out=tfplan
  #       working-directory: ./environments/${{ github.ref_name }}
  #       env:
  #         AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         TF_VAR_region: ${{ secrets.TF_VAR_region }}

  #     # Step 5: Apply Changes (Only for Production)
  #     - name: Apply Terraform Changes (only on prod branch)
  #       if: github.ref_name == 'prod'
  #       run: terraform apply -auto-approve tfplan
  #       working-directory: ./environments/${{ github.ref_name }}
  #       env:
  #         AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         TF_VAR_region: ${{ secrets.TF_VAR_region }}

  destroy:
    name: Terraform Destroy
    needs: terraform # Optional: depends on successful deployment
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set Up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.5.0"

      - name: Initialize Terraform
        run: terraform init
        working-directory: ./environments/${{ github.event.inputs.environment }}

      - name: Destroy Terraform Resources
        run: terraform destroy -auto-approve
        working-directory: ./environments/${{ github.event.inputs.environment }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          TF_VAR_region: ${{ secrets.TF_VAR_region }}
